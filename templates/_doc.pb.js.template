import React from 'react'
import { CodeBlock, atomOneDark as dracula } from 'react-code-blocks'
import { makeStyles } from '@material-ui/core/styles'
/* eslint-disable */
import {
    ExpandMore as ExpandMoreIcon,
    FlashOn as FlashOnIcon,
    Public as PublicIcon,
    BugReport as BugReportIcon
} from '@material-ui/icons'
/* eslint-enable */
import { Accordion, Typography, AccordionSummary, AccordionDetails, Chip } from '@material-ui/core'

const useStyles = makeStyles((theme) => ({
    heading: {
        paddingLeft: 0
    },
    code: {
        paddingRight: 20,
        paddingBottom: 20
    },
    break: {
        marginLeft: 20
    },
    route: {
        fontSize: 18,
        marginRight: 5
    },
    message: {
        color: "rgb(224, 108, 117)"
    },
    push: {
        "&.MuiChip-root": {
            marginLeft: 0,
            marginRight: 5
        }
    },
    refTitle: {
        flexBasis: "100%",
        height: 35,
        paddingTop: 10
    }
}))

export default function {{$.Name}}(props) {
    const classes = useStyles()

    {{- range $val := .Methods}}
    // Variables for {{$val.Name}} API
    const msg_{{$val.Name}}_req = `{{$val.RequestDesc }}`
    const msg_{{$val.Name}}_resp = `{{$val.ResponseDesc }}`
    const msg_{{$val.Name}}_scopes = [{{- range $scope := .Scopes}}"{{$scope }}",{{- end}}]

    {{- range $key, $value := .Messages}}
        const msg_{{$val.Name}}_{{$key | CleanChar}}_ref = `{{$value }}`
    {{end}}

    {{end}}


    return (
        <>
        {{- range $val := .Methods}}
        <Accordion>
            <AccordionSummary
            expandIcon={<ExpandMoreIcon />}
            aria-controls="panel-content-{{ $val.Name }}"
            id="panel-header-{{ $val.Name }}"
            >
            <Typography className={classes.heading}>
                {{ if $val.PushEvent }}
                <Chip label="EVENT" variant="outlined" icon={<FlashOnIcon />} className={classes.push} />
                {{ end }}

                <b className={classes.route}>{{ $val.Name }}</b>

                <span className={classes.message}>{{ $val.Request }}</span> returns <span className={classes.message}>{{ $val.Response }}</span>

                {msg_{{$val.Name}}_scopes.map((s) => <Chip label={s} color={s === "PLAYER" ? "secondary" : s === "GAME_SERVER" ? "primary" : ""} />)}

                {{ if $val.Public }}
                <Chip label="PUBLIC" variant="outlined" icon={<PublicIcon />} />
                {{ end }}

                {{ if $val.Debug }}
                <Chip label="DEBUG" variant="outlined" icon={<BugReportIcon />} />
                {{ end }}

            </Typography>
            </AccordionSummary>
            <AccordionDetails>
                {msg_{{$val.Name}}_req !== "" && <div className={classes.code}><i className={classes.refTitle}>Request:</i>
                    <CodeBlock
                        language="protobuf"
                        showLineNumbers={false}
                        text={msg_{{$val.Name}}_req}
                        theme={dracula}
                        wrapLines
                        />
                    <div className={classes.break}/>
                </div>}

                {msg_{{$val.Name}}_resp !== "" && <div className={classes.code}>
                    <i className={classes.refTitle}>Response:</i>
                    <CodeBlock
                        language="protobuf"
                        showLineNumbers={false}
                        text={msg_{{$val.Name}}_resp}
                        theme={dracula}
                        wrapLines
                        />
                </div>}

                {{ if $val.Messages }}

                <i className={classes.refTitle}>Dependencies:</i>
                {{- range $key, $value := .Messages}}
                    <div className={classes.code}>
                    <CodeBlock
                        language="protobuf"
                        showLineNumbers={false}
                        text={msg_{{$val.Name}}_{{$key | CleanChar}}_ref}
                        theme={dracula}
                        wrapLines
                    />
                    <div className={classes.break} />
                    </div>
                {{- end}}

                {{- end}}
            </AccordionDetails>
        </Accordion>

        {{- end}}

        </>

    )

}
